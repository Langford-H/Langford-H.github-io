<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>高等数学1</title>
      <link href="2021/02/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A61/"/>
      <url>2021/02/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A61/</url>
      
        <content type="html"><![CDATA[<h1 id="写在之前"><a href="#写在之前" class="headerlink" title="写在之前"></a>写在之前</h1><p>鉴于本人微积分遗忘过多，这个就当作是微积分的重新复习，以及一些以前微积分学习过程中并没有注意到的基础知识，日积月累望有所突破。文本是基于重读参考文献[1]后的写作，其中有大量借鉴，总归来讲算是个人学习笔记，但基于本人个人情况做了一些调整，做到尽量将某一个简单的问题叙述明白，讲清楚。 </p><h1 id="三角函数基础"><a href="#三角函数基础" class="headerlink" title="三角函数基础"></a>三角函数基础</h1><h2 id="弧度及角度问题"><a href="#弧度及角度问题" class="headerlink" title="弧度及角度问题"></a>弧度及角度问题</h2><p>弧度和角度<strong>都是</strong>用于描述一个角的大小的度量单位，类似于描述长度的单位有英寸厘米，二者从量纲角度来讲<strong>等价</strong>。</p><h2 id="三角函数名称由来"><a href="#三角函数名称由来" class="headerlink" title="三角函数名称由来"></a>三角函数名称由来</h2><p>complementary 意为“互余”，故我们统共有6个三角函数，共四组：sin-cos，tan-cot，sec-csc。每一对函数之间有这样的关系</p><script type="math/tex; mode=display">f(x)=co\quad f(\frac{\pi}{2}-x)</script><p>中文名中以“余”开头则是一组中的co函数（注：以上公式对co函数同样适用）<br>tan函数在$\frac{(2k+1)\pi}{2}\quad k\in Z$时无定义。上述中有两个三角函数sec csc较为陌生，$sec=\frac{1}{cos}$ $csc=\frac{1}{sin}$，与$sin-cos$这一对类似，$sec-csc$这一对形状相同，但一奇一偶，其中sec（中文名为正割）为偶函数，csc（中文名为余割）为奇函数，二者函数图像如下（图源来自Wikimedia）<br><img src="/2021/02/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A61/sec.png" class title="sec函数图像，引自[2]"><br><img src="/2021/02/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A61/csc.svg" class title="csc函数图像，引自[2]"><br>如图，二者分别在$\frac{(2k+1)\pi}{2}\quad k\in Z$以及$k\pi\quad k\in Z$上无定义。<br>在这里引述一张非常有趣的图片来解释六个三角函数间的关系：<br><div class="pdfobject-container" data-target="./高等数学1/hexagon.pdf" data-height="500px"></div><br>在这个六边形中，对角线两个函数的乘积为1（互为倒数），对于每一个阴影三角形，三角形的上端两角的值的平方和等于三角形下端角的平方，而每一个函数都等于其顺时针两函数之比，同样的任意一点的函数都等于这个函数所在左右端点的乘积。</p><h2 id="三角函数导数与相关极限"><a href="#三角函数导数与相关极限" class="headerlink" title="三角函数导数与相关极限"></a>三角函数导数与相关极限</h2><h3 id="几个重要极限"><a href="#几个重要极限" class="headerlink" title="几个重要极限"></a>几个重要极限</h3><p>我们有一个基本的极限（或者说无穷小也可以），那就是</p><script type="math/tex; mode=display">\lim_{x \to 0}\frac{\sin x}{x}=1</script><p>接下来我们来证明它，首先在单位圆上做相关的面积图有  </p><p><object data="./高等数学1/sinproof.pdf" type="application/pdf" width="100%" height="877px"><br>设我们所研究的角度的弧度为x,其大于零但小于$\frac{\pi}{2}$，我们需要三个面积：以单位1为底，$\sin x$为高的三角形面积为：$\frac{\sin x}{2}$，弧度为x半径长度为1的扇形面积为：$\pi\times\frac{x}{2\pi}=\frac{x}{2}$，还有以$\tan x$为高，1为底的三角形面积为：$\frac{\tan x}{2}$。同时我们从图中可以清楚的得到以上三者的面积大小关系，将其代数化则有：</object></p><script type="math/tex; mode=display">\frac{\sin x}{2}< \frac{x}{2}<\frac{\tan x}{2}</script><p>化简一下有：</p><script type="math/tex; mode=display">\frac{1}{\sin x} >\frac{1}{x}>\cot x</script><p>每一项都乘以$\sin x$则有  </p><script type="math/tex; mode=display">1>\frac{\sin x}{x}>\cos x</script><p>而根据夹逼定理有当x从正向趋近于零时，目标函数有</p><script type="math/tex; mode=display">\lim_{x \to 0^+}\frac{\sin x}{x}=1</script><p>同时由于函数$\frac{\sin x}{x}$为偶函数，所以其从正向或是负向逼近零的时候结果相同,证明完毕。<br>我们由它再推出几个重要极限：</p><script type="math/tex; mode=display">\lim_{x \to 0}\frac{\tan x}{x}=\lim_{x \to 0}\frac{\sin x}{x}\times \frac{1}{\cos x}=1</script><script type="math/tex; mode=display">\lim_{x \to 0}\frac{1-\cos x}{x}=\lim_{x \to 0}\frac{\sin^2(x)}{x}\times\frac{1}{1+\cos x}=0</script><p>拥有了以上几个重要极限之后，我们就可以对三角函数的导数进行推导了。<br>首先就是sin的导数推导，由导数定义式有：</p><script type="math/tex; mode=display">f'(x)=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}=\lim_{h\to 0}\frac{\sin(x+h)-sin(x)}{h}=\lim_{h\to 0}\frac{\sin(x)\cos(h)+\sin(h)\cos(x)-sin(x)}{h}=\lim_{h\to 0}\{sin(x)\frac{(\cos(h)-1)}{h}+\cos(x)\frac{\sin(h)}{h}\}=\cos(x)</script><p>同理运用以上的极限我们可以求得函数cos的导数：  </p><script type="math/tex; mode=display">\frac{d\cos x}{d x}=-\sin x</script><p>以以上我们求得的这一组函数的导数为基础，我们可以运用链式规则，运用求导商法则，求出剩余四个三角函数的导数，在此不再一一证明，将其列举如下：</p><script type="math/tex; mode=display">\frac{d\tan x}{d x}=\sec^2(x),\frac{d\cot x}{d x}=-\csc^2(x)</script><script type="math/tex; mode=display">\frac{d\sec x}{d x}=\sec(x)\tan(x),\frac{d\csc x}{d x}=-\csc(x)\cot(x)</script><p>写出来后我们会发现一些规律，co函数最终的求导结果都带有负号，且与同一组函数的导数呈现互余。</p><h1 id="连续性与可导性的备忘录"><a href="#连续性与可导性的备忘录" class="headerlink" title="连续性与可导性的备忘录"></a>连续性与可导性的备忘录</h1><p>在第一次接触连续性与可导性时理解完全不深刻，所谓的一些可导必连续，连续不一定可导还是借助同学间流传的自行车的笑话记住的，本次对其进行简单但相对细致的探究，以求理解。</p><h2 id="从导数的角度出发"><a href="#从导数的角度出发" class="headerlink" title="从导数的角度出发"></a>从导数的角度出发</h2><p>在定义某一点的导数的时候我们有</p><script type="math/tex; mode=display">f'(x)=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}</script><p>从几何上讲（我们单纯的把它限制在一次函数内），这就是在曲线上先取一定点A$(x,f(x))$，然后在同一曲线上取除了该定点的另一点B$(x+h,f(x+h))$，用直线将这两点连接起来当h趋于零时，该直线的斜率就是导数，即就是该点切线的斜率。</p><h2 id="再来思考连续"><a href="#再来思考连续" class="headerlink" title="再来思考连续"></a>再来思考连续</h2><p>连续的定义为：$x \in I$（I为函数定义域）当$c-\delta &lt; x &lt; c+\delta$时有任意的正实数$\varepsilon$满足$f(c)-\varepsilon&lt; f(x) &lt; f(x)+\varepsilon$则该函数在c处连续。简单的讲，就是在左右逼近极限后，它所得到的是一个统一的值。现在给出一个例子，观察函数$y=|x|$，你会发现这个函数在定义域上是完全连续的，那么它同样在定义域内可导吗？<br>我们很容易的的发现，在$x=0$处，该函数图像是一个尖点，考虑之前我们对函数导数下的几何方面的定义，你会发现，函数在该点上没有唯一的切线，故其不可导。综上，连续是不一定可导的，我们接下来证明可导一定连续。<br>借由刚才得到的求导的定义式我们有：</p><script type="math/tex; mode=display">f'(x)=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}\times h=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}\times \lim_{h\to 0}h=0</script><p>则</p><script type="math/tex; mode=display">\lim_{h\to 0}f(x+h)-f(x)=0</script><p>即</p><script type="math/tex; mode=display">\lim_{h\to 0}f(x+h)=f(x)</script><p>综合之前连续性定义，有可导一定连续。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1]《普林斯顿微积分读本》 Adrian Banner著 杨爽等译<br>[2]Wikimedia官网<a href="https://commons.wikimedia.org/wiki/Main_Page">https://commons.wikimedia.org/wiki/Main_Page</a><br>[3]tikz模板官网<a href="https://texample.net/media/tikz/examples/PDF/trigonometric-hexagon.pdf">https://texample.net/media/tikz/examples/PDF/trigonometric-hexagon.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> 微积分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微积分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git与Github(1)</title>
      <link href="2021/02/04/Git-and-Github/"/>
      <url>2021/02/04/Git-and-Github/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Git，什么又是Github？"><a href="#什么是Git，什么又是Github？" class="headerlink" title="什么是Git，什么又是Github？"></a>什么是Git，什么又是Github？</h1><h2 id="先说Git"><a href="#先说Git" class="headerlink" title="先说Git"></a>先说Git</h2><p>与众人所熟知的githb不一样，git是一个<strong>软件</strong>，就如同你装在计算机里运行的所有其他软件一样，这是一个伟大的发明创造。</p><h3 id="起源、定义"><a href="#起源、定义" class="headerlink" title="起源、定义"></a>起源、定义</h3><p>git的创造者是Linus Benedict Torvalds， 林纳斯先生的另一伟大创造就是Linux系统，而我们的主角Git也与Linux有着很深的联系，Git是为Linux专门打造的版本控制器。<br>综上我们现在有两个问题，什么是版本控制器？为什么Linux需要这个玩意？ </p><h4 id="先来解决第一个文题：什么是版本控制器？"><a href="#先来解决第一个文题：什么是版本控制器？" class="headerlink" title="先来解决第一个文题：什么是版本控制器？"></a>先来解决第一个文题：什么是版本控制器？</h4><p>版本控制器统称VCS(version control system)顾名思义，它就是用来控制版本的。如果你有玩过单机版RPG游戏，那么你一定会懂，在每次面对强大的boss时，你首先需要做的就是存档，当boss战对自己不利，或是消耗太多时，为了避免死亡，你可以选择读档，从之前你的存档处开始，既避免了死亡的惩罚，又不用像之前一样解决小怪。<br>版本控制器就是文件版的存档，当你在自己的计算机上完成某一个项目时，你可以借助VCS来实现版本的储存迭代，它会记录下每一次的版本内容，提交时间，你可以选择从现在跳回(Git中成为回滚)之前你储存的<strong>任何</strong>一个版本。<br>要做到以上，通常我们会这么做<img src="/2021/02/04/Git-and-Github/example.png" class title="example"><br>这样会导致文件乱七八糟，如果起名不规则，还会导致文件错乱。但如果运用Git，文件夹中只会有一个文件，但却保存所有的文件版本。以上过程都在你自己的本地计算机中进行，叫做local VCS，Git当然能做到，但它做到的不仅于此。<br><img src="/2021/02/04/Git-and-Github/Lvcs.png" class title="Local vcs示意图，引自[3]">  </p><h4 id="我们先解决第二个问题：为什么Linux需要Git？"><a href="#我们先解决第二个问题：为什么Linux需要Git？" class="headerlink" title="我们先解决第二个问题：为什么Linux需要Git？"></a>我们先解决第二个问题：为什么Linux需要Git？</h4><p>我在此对Linux不多作介绍，读者若对此没有概念，那请 <strong><em>一定</em></strong> 学习有关于它的相关资料，Linux是开源的操作系统，既然是开源的就会有杰出的程序员、黑客为它做出贡献，但是这就涉及到一个问题，我们该如何将这些代码片段合成来实现Linux的更新呢？原来的方法，是由林纳斯手动填补，但这样效率低下，重复劳动大，自2002年起，Linux开始使用Bitkeeper(一个商用软件)作为版本控制器，来实现版本更新，这是怎么实现的？我们借此机会介绍版本控制器的另外两种模式：Centralized VCS 和 Distributed VCS。<br>Centralize VCS由一个数据中心和多个开发者构成，所有的数据、文件等都存储且仅存储在数据中心中，开发者负责对数据中心中的文件进行创建debug等。这样的好处是管理数据中心者具有绝对的权限，他可以指定每一个开发者的权限，设定他能看到多少内容。但这样做却冒着巨大的风险，一旦数据中心遭到攻击或是出现系统故障，所有人的工作都有在一瞬间化泡影的风险。<img src="/2021/02/04/Git-and-Github/Cvcs.png" class title="Centralized vcs示意图，引自[3]">Distributed VCS填补了这样的问题。<br>它将原本的Local VCS与Centralized VCS相结合，它在每个人的计算机包括中心数据库上都建立了数据库，存放了自初始到最终版本中每一个文件版本，每个人都可以将自己的工作发布上传到中心数据库，看到文件更新的人都可以从数据中心下载保存在自己的计算机之中，在此基础上再做贡献。<br><img src="/2021/02/04/Git-and-Github/Dvcs.png" class title="Distributed vcs示意图，引自[3]">Git就是帮助我们实现这一切的软件，而我们使用Git上传到的数据中心，就是大名鼎鼎的Github。<br>回到那段历史，Bitkeeper一直为Linux提供服务，直到2005年，该公司与Linux社区一众黑客决裂，相传原因是有人尝试对Bitkeeper进行破解(就是把人家的正版软件盗版化。顺带一提，Bitkeeper一直无偿为Linux社区提供服务。)没办法，社区们的诸位以林纳斯先生为首，于2005年推出了Git，来帮助Linux进行版本更新，代码补充。今天，Git不再单单是Linux的专属软件，它为windows、Linux、Mac等系统提供 <strong><em>无偿的、开源的服务</em></strong>，Git一经推出迅速占领了VCS的市场，随着Github的面世，Git的用户数量再次获得了爆炸性的增长。2016年，原本作为商业软件的Bitkeeper，宣布对外开源。  </p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>[1]bitkeeper官网： <a href="https://www.bitkeeper.org/">https://www.bitkeeper.org/</a><br>[2]Git官网：<a href="https://git-scm.com/">https://git-scm.com/</a><br>[3]<strong>Progit</strong> written by Scott Chacon and Ben Straub(该书可以免费在Git官网上下载，文中思维导图均引自此书)</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
