<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SICP2020(1)</title>
      <link href="2021/03/11/SICP2020-1/"/>
      <url>2021/03/11/SICP2020-1/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>加州伯克利大学自2011年起启用了python作为CS61a这一课程的主要编程语言，课程内容也与之前相比有了不少变化（主题内容以及中心思想并无改变），更重要的是课程资源有了极大的丰富，而网络上很少有中文版本的对相应资源的使用指导，这让我在开始学习时也遇到了不少问题；而CS61a作为编程开山课程，做到了让高中生也可以学习本课程，但是让他们克服如此障碍有些困难，于是我决定将一些问题总结汇总，希望能够帮助中文母语的编程初学者。希望你玩得愉快！！！</p><h1 id="在终端中操作样例的常见错误"><a href="#在终端中操作样例的常见错误" class="headerlink" title="在终端中操作样例的常见错误"></a>在终端中操作样例的常见错误</h1><p>在伯克利大学2020年春季的SICP版本中，课后的script并没有仔细说明在终端中操作python的具体步骤，导致如果没有看课堂视频的同学们迟迟无法进行操作，现将其归结如下：<br>凡是看到代码第一行中出现<code>&gt;&gt;&gt;</code>代表了该代码是在终端中运行的，请windows的同学启用git bash并在其中输入python，使得其转入python并显示<code>&gt;&gt;&gt;</code>而不是原来的<code>~$</code><br><img src="/2021/03/11/SICP2020-1/py.png" class><br>大家看到的script中的换行好像在git bash中很难实现，其实只要正确的输入相应的指令，例如</p><pre><code>&gt;&gt;&gt;from opeartor import mul&gt;&gt;&gt;def square(x):       return mul(x, x) </code></pre><p>但如果你正确输入了相关指令，再摁下回车键后，你会发现git bash中出现的不是<code>&gt;&gt;&gt;</code>，而是<code>...</code>，如下图：<br><img src="/2021/03/11/SICP2020-1/py1.png" class><br>现在我们再来回看几个在开始编写程序时容易出现的问题：<br>1.注意是<code>def</code>不是<code>define</code>!!!与我们在编写<code>scheme</code>时是完全不一样的。<br>2.注意<code>def</code>后要加<code>:</code>，且一定是英文的。<br>3.注意缩进，python因为没有像scheme中的括号以及c或c++中的<code>;</code>所以它的各种语句辨识都靠缩进，一般来讲一个函数在跳入下一级定义时需要缩进，也就是常说的<code>Tab</code>键，是四个空格。  </p><h1 id="SICP提交作业方法"><a href="#SICP提交作业方法" class="headerlink" title="SICP提交作业方法"></a>SICP提交作业方法</h1><p>python版SICP最大的改进就是它的自动审批作业系统，我们在CS61a官网上按照课程表下载相应的lab与hw文件，不用联网就可以自动检测自己的作业以及lab是否正确，该系统叫做<code>ok</code>。现在介绍windows系统下的<code>ok</code>系统的具体使用方法。<br>请在电脑中预先安装<code>Git</code>，有关<code>Git</code>的介绍在另一篇博客上。在安装选项时除了图示选项<br><img src="/2021/03/11/SICP2020-1/py2.png" class title="引自CS61a 2020spring Lab00"><br>其余选项都可以使用默认。</p><h2 id="hw的批改方法"><a href="#hw的批改方法" class="headerlink" title="hw的批改方法"></a>hw的批改方法</h2><p>每一次的hw作业都会在课程网站上有一个相应的压缩文件可供下载，建议建立一个属于CS61a的文件夹方便管理。在相应网站上都会有一行相应的命令用于作业检查（忽略作业提交指令，只有拥有伯克利大学账号的同学才可以提交）我们以hw01为例，如图<br>进入课程主页找到hw01<br><img src="/2021/03/11/SICP2020-1/py3.png" class title="来自&lt;https:&#x2F;&#x2F;inst.eecs.berkeley.edu&#x2F;~cs61a&#x2F;sp20&#x2F;&gt;"><br>进入后可以下载相应压缩文件并解压<br><img src="/2021/03/11/SICP2020-1/py4.png" class title="来自&lt;https:&#x2F;&#x2F;inst.eecs.berkeley.edu&#x2F;~cs61a&#x2F;sp20&#x2F;&gt;"><br>文件中包含我们的作业代码（忽略其他，只关注我们的作业代码即可），运用编辑器打开作业代码并根据网站上的作业要求完成作业，此时我们回到网站，我们会发现在每一道题的后面都会有检查指令，可是该检查指令该怎样使用呢？<br><img src="/2021/03/11/SICP2020-1/py5.png" class title="来自&lt;https:&#x2F;&#x2F;inst.eecs.berkeley.edu&#x2F;~cs61a&#x2F;sp20&#x2F;&gt;"><br>回到我们储存作业的文件夹，鼠标右键，你会发现选项中多了<code>Git Bash here</code>这个选项（<strong><em>注意！！！一定是要在该文件夹内部鼠标右键！！！</em></strong>）<br><img src="/2021/03/11/SICP2020-1/py6.png" class><br>我们使用从网站上拷贝下来的指令后加<code>--local</code>输入进git bash中就会启动<code>ok</code>程序对我们写的代码进行批改。注意，在命令的最后添加local的意思是将所写代码仅在本地进行校验，而不将其上传，如果忘记添加则系统会要求输入邮箱，十分麻烦。<br><img src="/2021/03/11/SICP2020-1/py7.png" class><br>而如果错误系统也会显示相应的错误类型，方便纠错。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>提交相应某一问题时只需要在相应位置打开git bash输入指令<code>python ok -q &lt;name&gt; --local</code>其中<code>&lt;&gt;</code>中的内容需要在课程网站上查询，或者在代码中查看，每一道题都有相应的名称，如果想要一次性全部验证只需要输入<code>python ok</code>即可（由于python版本的差别，该指令的第一个单词可以是<code>python python3 py</code>此项依据python版本而定）</p><h2 id="lab的批改方法"><a href="#lab的批改方法" class="headerlink" title="lab的批改方法"></a>lab的批改方法</h2><p>lab共分为两个部分，课堂部分以及课下练习，其中课下联系的部分与hw相同，需要首先在lab中下载压缩文件，打开压缩文件中的lab01.py（借用第一次实验为例）根据注释中的相关要求，完成代码，并借助代码中的题目名称进行ok校验即可。<br>lab线上课程的操作方法则较为简单在相应的文件夹中git bash here，根据网站上直接输入网站上的指令就可以开始答题<br><img src="/2021/03/11/SICP2020-1/py8.png" class><br><img src="/2021/03/11/SICP2020-1/py9.png" class><br>在<code>?</code>处输入相应的答案即可。</p><h1 id="纯函数以及非纯函数"><a href="#纯函数以及非纯函数" class="headerlink" title="纯函数以及非纯函数"></a>纯函数以及非纯函数</h1><h2 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h2><p>在python终端中调用<code>abs</code>函数</p><pre><code>&gt;&gt;&gt; abs(-2)2</code></pre><p>我们说<code>abs</code>是一纯函数，它有一个input返回一个output，只要input相等，output一定是相等的。</p><h2 id="非纯函数"><a href="#非纯函数" class="headerlink" title="非纯函数"></a>非纯函数</h2><p>python中的函数<code>print</code>是一个典型的非纯函数，我们在终端输入</p><pre><code>&gt;&gt;&gt; print(1,2,3)1 2 3</code></pre><p>你可能会开始纳闷，只要输入<code>1,2,3</code>它返回的不应该都是相同的结果吗？为什么它不是纯函数呢？想到这里可以说明你已经掌握了纯函数的奥义了，但请不要急，接着往下看。<br>请尝试以下输入</p><pre><code>&gt;&gt;&gt;print(print(1),print(2))12None None</code></pre><p>你会发现，结果与你预想之中的不一样，多了两个<code>None</code>，我们现在来揭晓答案，<code>print</code>函数不论接收<strong><em>任何输入</em></strong>，其返回值都是<code>None</code>，该值在python中表示无，没有。而你的屏幕上显示的东西是<code>print</code>函数的功能：即在屏幕上打印出所输入的值。<strong>但是请十二万分的注意</strong>，它只是把东西打印在了屏幕上，其本身什么数值都没有返还！所以它是一个彻头彻尾的非纯函数。<br>上述例子中，括号内第二个和第三个<code>print</code>只是老老实实地把你交给它的数字打了出来而已，而第一个<code>print</code>也只是老老实实的把收到的两个<code>print</code>返回的<code>None</code>打印了出来而已。<br>我们再来看一个例子</p><pre><code>&gt;&gt;&gt;two = print(2)2&gt;&gt;&gt;print(two)None %有些人会报错</code></pre><p>第一个式子中<code>print</code>接收到2，于是老老实实的把2打印了出来，而第二个例子中因为two没有给<code>print</code>赋予任何的数值，<code>print</code>会返回<code>None</code>，而新版python的interpreter会把<code>two</code>当成没有定义的函数，从而报错。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>本文基于加州伯克利大学CS61a2020年春季公开资料写成，目的在于帮助他人更好的使用相关资源，以上仅为本人经验总结及学习回顾，详细资料请自行访问加州伯克利大学CS61a课程官网<a href="https://inst.eecs.berkeley.edu/~cs61a/archives.html">https://inst.eecs.berkeley.edu/~cs61a/archives.html</a>，如果对<code>ok</code>有什么问题请查阅<a href="https://cal-cs-61a-staff.github.io/ok-help/">https://cal-cs-61a-staff.github.io/ok-help/</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
            <tag> Founctional Programming </tag>
            
            <tag> SICP </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICP1</title>
      <link href="2021/03/01/SICP1/"/>
      <url>2021/03/01/SICP1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言与背景介绍"><a href="#前言与背景介绍" class="headerlink" title="前言与背景介绍"></a>前言与背景介绍</h1><p>SICP是著作Structure and Interpreatation of Computer Programs的简称，同时是北美一众CS强校（例如加州伯克利，滑铁卢大学等）的CS第一门专业课Functional Programming（下简称FP）的教材。笔者抱着兴趣与学习计算机技术与一窥人类计算机教育最前沿的目的，在有一定计算机基础的情况下接触了这门课（学习资源为SICP、加州大学伯克利分校于YouTube上上传的网课CS61A、以及该课程任课教授在互联网上<strong><em>完全公开</em></strong>的教案、教学顺序表），只是初探就受益匪浅，完完全全刷新了本人对计算机及编程教育的认知，相比国内的计算机教育，北美的计算机教育显然显得更为成熟，而且对待有无计算机基础的同学并无差别，这是我们非常值得学习的。<br>从内容讨论这门课程，课程的中心在于<strong><em>编程</em></strong> 而不是像通常我所熟知的国内计算机教育顺序中心在于 <strong><em>编程语言</em></strong>。相比较于国内一上来就用C语言作为学生的“开山语言”，FP则使用了不用关心内存分配，不用担心抬头引用的高级语言Scheme，引用课程中教授的原话并做翻译：“我们学习这门课是让你们对计算机有一个大的框架，让你们知道编程到底是什么，剩下的问题例如内存分配，那是你们在学会编程之后的细节问题。”关联我当时学习计算机的过程，在学习C和C++时，我们更关注的好像确实不是编程本身，而是C++的各种已经封装好的工具，就像知道继承多态的好像就要比只知道函数的同学要上一个档次，知道STL的同学就要比知识到达继承多态的同学要牛逼一些。<br>本课程的目的在于使用最简单的工具（if-else函数与condition函数）将我们日后所熟知的大部分功能函数以及数据结构实现，扪心自问一下，自己是否真的学会的“递归”这一重要方法，如果只有一个if-else函数，你能否写出while函数？能否完成线性表？树？图？作为自以为是的学生，我本人需要反思，同时我们的计算机教育也需要反省并承认自己的不足及落后了。这一系列文章相当于是在学习该门课程中的各种总结，以及有些在书中课里资料里都找不到的问题答案，我也会从stack overflow中翻译整理下来，为技术打破语言壁垒尽一份力。<br>我在写相关系列文章时会尽量将一些重点名词用原文代入，因为本人计算机水平过浅，随意翻译可能会导致信息偏差。同样本人计算机水平十分有限，有错误之处在所难免，还请见谅。<br>附CS61A课程网站：<a href="https://inst.eecs.berkeley.edu//~cs61a/su10/index.html">https://inst.eecs.berkeley.edu//~cs61a/su10/index.html</a>课程教案、讨论内容、作业包括课本都在该网站上免费向全世界提供。<br>特别致谢CS61A任课教授、<a href="http://teachyourselfcs.com">http://teachyourselfcs.com</a>网站所有、以及在stack overflow、CSDN、知乎等平台为scheme这门冷门计算机语言答疑解惑，为学习SICP的学生们指路的前辈。  </p><h1 id="Scheme安装与开始步骤（2021年）"><a href="#Scheme安装与开始步骤（2021年）" class="headerlink" title="Scheme安装与开始步骤（2021年）"></a>Scheme安装与开始步骤（2021年）</h1><p>由于网上较多流传的网课版本为2010年的CS61A录像，课堂上教授使用的编辑器与编译器在十年后的今天有了更优选择，请自行搜索并于官网下载DrRacket<a href="https://racket-lang.org/">https://racket-lang.org/</a>，下载并使用exe安装完成后请于安装处打开文件夹，双击<img src="/2021/03/01/SICP1/Racket.png" class>打开，看到所示页面<img src="/2021/03/01/SICP1/racket1.png" class>点击package manager，在这里我们有两种选择，都同样的可以满足本课程的全部所需，见下图<img src="/2021/03/01/SICP1/racket2.png" class><img src="/2021/03/01/SICP1/racket3.png" class>点击下载即可。进入DrRacket后你会发现界面分为两个部分，上面的部分是我们需要输入代码的区域，而下半部分则是输出反馈。<img src="/2021/03/01/SICP1/racket4.png" class><br>请记住，在之后的每一次编程中我们都需要在编程开始时选择语言，即在第一行输入<code># lang simply-scheme</code>或者<code># lang sicp</code>（基于个人安装），想要执行程序点击右上角Run即可。注意，当我们选择语言并且至少成功执行了一次后就会发现在我们的输出区域出现如下字样：<img src="/2021/03/01/SICP1/racket5.png" class>若无，则有可能出现编译错误或者自己在写程序时忘记添加语言选择。  </p><h1 id="scheme基础语法"><a href="#scheme基础语法" class="headerlink" title="scheme基础语法"></a>scheme基础语法</h1><h2 id="基础运算以及编写规范"><a href="#基础运算以及编写规范" class="headerlink" title="基础运算以及编写规范"></a>基础运算以及编写规范</h2><p>scheme的基础语法以operator（操作符） 与 operands（受操作对象）组成，在scheme中将二者联系起来的符号是括号（paretheses）和空格，我们以最简单的加法为例  </p><pre><code># lang simply-scheme(+ 1 2)</code></pre><p>以此为例，<code>+</code>是我们的operator，而1、2则是operands，scheme提供前置算符运算，即所要进行的操作规则前置，要进行该项操作的对象之间用空格隔开，并与相应操作规则用同一个括号括起来。不光是加法，所有的基本运算以及之后我们要学习到的一些定义运算都符合这个规则，如果说在scheme语法中需要注意的事项，那么我认为只有一个：<strong><em>括号</em></strong>。浏览stack overflow，绝大多数初学者在编译出现问题时都是忘记在某一个不显眼的地方忘记了<strong><em>括号</em></strong>。scheme为nesting（嵌套）的运算提供了比较简便的输入方法例如：</p><pre><code># lang simply-scheme(* (+ 1 2) (+ 3 4) (+ 5 6))</code></pre><p>但这么些会出现一些问题，就像我们之前提到的括号是scheme中最重要的元素，写成一行会让代码可读性很差，为此我们规定一些代码编写规则，在嵌套运算时，长元素之间用换行分割，而运算归属（或者是先后）则用缩进来表示，以上式为例</p><pre><code># lang simply-scheme(* (+ 1 2)   (+ 3 4)   (+ 5 6))</code></pre><p>式中并列的三个元素代表它们地位相等，在缩进中都在<code>*</code>之后，代表他们都是该操作符的元素。在scheme中<code>(</code>在大多数情况下都代表着某一个操作的开始，在写代码时请不断自我审问，我要开始某一个操作指令了吗？<strong><em>我加括号了吗？</em></strong><br>编程中还有一个重要的内容，comment，scheme的comment符号为<code>;</code>在此之后的所有内容计算机不会编译。<br>引用书中原话，在编程的过程中我们只处理两种东西，procedure和data，从计算机的角度出发二者在计算机内的存储处理方式其实都是数据，只不过一个是我们要操作的对象，另一个则是我们进行操作的方法。接下来我们看一种特别的操作方式。  </p><h2 id="define"><a href="#define" class="headerlink" title="define"></a>define</h2><p>我们可以用该命令对某个数据附值，例如：</p><pre><code># lang simply-scheme(define a 2)</code></pre><p>意为将2的值赋予名称<code>a</code>，之后我们可以使用<code>a</code>来代替2进行一系列代数运算，在输入端执行改代码后，在输入端输入（其中<code>&gt;</code>为输入命令，无该符号则是电脑输出结果）</p><pre><code>&gt;a2&gt;(+ a 1)3</code></pre><p>然而<code>define</code>的强大之处不止于此，我们看下面的一个例子</p><pre><code># lang simply-scheme(define (square x) (* x x))</code></pre><p>运行之后在输出端输入</p><pre><code>&gt;(square 10)100&gt;(squre 3)9</code></pre><p>根据我们的输入代码以及相关的测试结果，我们不难得到，我们使用<code>define</code>将<code>square</code>定义为了函数，而函数表达式为随函数后跟的参数的平方，在此先给出<code>define</code>在定义函数时的用法</p><pre><code>(define (函数名称 参数formal_parameter) (函数主体body));参数可以不为一，函数主体中为相应的表达式</code></pre><p>相应的我们在调用已经定义的参数时遵守相应规则，<code>(函数名称 参数)</code>。值得一提的是，当我们在写函数主体时可以不拘束于基本的运算，函数主体也可以包含<strong>函数</strong>，还是用书上的原例子，接续上面的函数继续，（注意以上样例公式中为了表达简便并没有按照代码编写规范，在如下实例中我们运用代码表达规范对<code>define</code>进行规范表达，请一定养成这样的习惯。）</p><pre><code>(define (sum_square x y)         (+             (square x)             (square y)        ))</code></pre><p>此例中针对一个函数我们有两个参数，且在函数主体中调用了之前存在的函数进行运算。<br>我们借由CS61A中教案的例子，加深对<code>define</code>命令的认识<br>思考</p><pre><code>(define x 3)</code></pre><p>与</p><pre><code>(define (x) 3)</code></pre><p>有什么差别？根据我们上面的所学知识，<code>(define x 3)</code>的目的是将数值3赋予<code>x</code>，而<code>(define (x) 3)</code>则完全不一样，它的意思是创造一个函数函数的名称为<code>x</code>，而这个函数就是3。我们分别运行以上两个函数，然后在输入端输入以下指令</p><pre><code>&gt;(x)</code></pre><p>第一个函数报错，第二个函数正常得出结果。</p><pre><code>&gt;x+3</code></pre><p>第一个函数正常运行，而第二个函数报错。这是因为我们最后得到的两个<code>x</code>他们的数据结构是不同的！！！请谨记这一点。</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
            <tag> Founctional Programming </tag>
            
            <tag> Scheme </tag>
            
            <tag> SICP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学1</title>
      <link href="2021/02/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A61/"/>
      <url>2021/02/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A61/</url>
      
        <content type="html"><![CDATA[<h1 id="写在之前"><a href="#写在之前" class="headerlink" title="写在之前"></a>写在之前</h1><p>鉴于本人微积分遗忘过多，这个就当作是微积分的重新复习，以及一些以前微积分学习过程中并没有注意到的基础知识，日积月累望有所突破。文本是基于重读参考文献[1]后的写作，其中有大量借鉴，总归来讲算是个人学习笔记，但基于本人个人情况做了一些调整，做到尽量将某一个简单的问题叙述明白，讲清楚。 </p><h1 id="三角函数基础"><a href="#三角函数基础" class="headerlink" title="三角函数基础"></a>三角函数基础</h1><h2 id="弧度及角度问题"><a href="#弧度及角度问题" class="headerlink" title="弧度及角度问题"></a>弧度及角度问题</h2><p>弧度和角度<strong>都是</strong>用于描述一个角的大小的度量单位，类似于描述长度的单位有英寸厘米，二者从量纲角度来讲<strong>等价</strong>。</p><h2 id="三角函数名称由来"><a href="#三角函数名称由来" class="headerlink" title="三角函数名称由来"></a>三角函数名称由来</h2><p>complementary 意为“互余”，故我们统共有6个三角函数，共四组：sin-cos，tan-cot，sec-csc。每一对函数之间有这样的关系</p><script type="math/tex; mode=display">f(x)=co\quad f(\frac{\pi}{2}-x)</script><p>中文名中以“余”开头则是一组中的co函数（注：以上公式对co函数同样适用）<br>tan函数在$\frac{(2k+1)\pi}{2}\quad k\in Z$时无定义。上述中有两个三角函数sec csc较为陌生，$sec=\frac{1}{cos}$ $csc=\frac{1}{sin}$，与$sin-cos$这一对类似，$sec-csc$这一对形状相同，但一奇一偶，其中sec（中文名为正割）为偶函数，csc（中文名为余割）为奇函数，二者函数图像如下（图源来自Wikimedia）<br><img src="/2021/02/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A61/sec.png" class title="sec函数图像，引自[2]"><br><img src="/2021/02/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A61/csc.svg" class title="csc函数图像，引自[2]"><br>如图，二者分别在$\frac{(2k+1)\pi}{2}\quad k\in Z$以及$k\pi\quad k\in Z$上无定义。<br>在这里引述一张非常有趣的图片来解释六个三角函数间的关系：<br><img src="/2021/02/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A61/hexagon.jpg" class title="三角函数关系，引自[3]"><br>在这个六边形中，对角线两个函数的乘积为1（互为倒数），对于每一个阴影三角形，三角形的上端两角的值的平方和等于三角形下端角的平方，而每一个函数都等于其顺时针两函数之比，同样的任意一点的函数都等于这个函数所在左右端点的乘积。</p><h2 id="三角函数导数与相关极限"><a href="#三角函数导数与相关极限" class="headerlink" title="三角函数导数与相关极限"></a>三角函数导数与相关极限</h2><h3 id="几个重要极限"><a href="#几个重要极限" class="headerlink" title="几个重要极限"></a>几个重要极限</h3><p>我们有一个基本的极限（或者说无穷小也可以），那就是</p><script type="math/tex; mode=display">\lim_{x \to 0}\frac{\sin x}{x}=1</script><p>接下来我们来证明它，首先在单位圆上做相关的面积图有<br><img src="/2021/02/19/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A61/sinproof.jpg" class><br>设我们所研究的角度的弧度为x,其大于零但小于$\frac{\pi}{2}$，我们需要三个面积：以单位1为底，$\sin x$为高的三角形面积为：$\frac{\sin x}{2}$，弧度为x半径长度为1的扇形面积为：$\pi\times\frac{x}{2\pi}=\frac{x}{2}$，还有以$\tan x$为高，1为底的三角形面积为：$\frac{\tan x}{2}$。同时我们从图中可以清楚的得到以上三者的面积大小关系，将其代数化则有：</p><script type="math/tex; mode=display">\frac{\sin x}{2}< \frac{x}{2}<\frac{\tan x}{2}</script><p>化简一下有：</p><script type="math/tex; mode=display">\frac{1}{\sin x} >\frac{1}{x}>\cot x</script><p>每一项都乘以$\sin x$则有  </p><script type="math/tex; mode=display">1>\frac{\sin x}{x}>\cos x</script><p>而根据夹逼定理有当x从正向趋近于零时，目标函数有</p><script type="math/tex; mode=display">\lim_{x \to 0^+}\frac{\sin x}{x}=1</script><p>同时由于函数$\frac{\sin x}{x}$为偶函数，所以其从正向或是负向逼近零的时候结果相同,证明完毕。<br>我们由它再推出几个重要极限：</p><script type="math/tex; mode=display">\lim_{x \to 0}\frac{\tan x}{x}=\lim_{x \to 0}\frac{\sin x}{x}\times \frac{1}{\cos x}=1</script><script type="math/tex; mode=display">\lim_{x \to 0}\frac{1-\cos x}{x}=\lim_{x \to 0}\frac{\sin^2(x)}{x}\times\frac{1}{1+\cos x}=0</script><p>拥有了以上几个重要极限之后，我们就可以对三角函数的导数进行推导了。<br>首先就是sin的导数推导，由导数定义式有：</p><script type="math/tex; mode=display">f'(x)=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}=\lim_{h\to 0}\frac{\sin(x+h)-sin(x)}{h}=\lim_{h\to 0}\frac{\sin(x)\cos(h)+\sin(h)\cos(x)-sin(x)}{h}=\lim_{h\to 0}\{sin(x)\frac{(\cos(h)-1)}{h}+\cos(x)\frac{\sin(h)}{h}\}=\cos(x)</script><p>同理运用以上的极限我们可以求得函数cos的导数：  </p><script type="math/tex; mode=display">\frac{d\cos x}{d x}=-\sin x</script><p>以以上我们求得的这一组函数的导数为基础，我们可以运用链式规则，运用求导商法则，求出剩余四个三角函数的导数，在此不再一一证明，将其列举如下：</p><script type="math/tex; mode=display">\frac{d\tan x}{d x}=\sec^2(x),\frac{d\cot x}{d x}=-\csc^2(x)</script><script type="math/tex; mode=display">\frac{d\sec x}{d x}=\sec(x)\tan(x),\frac{d\csc x}{d x}=-\csc(x)\cot(x)</script><p>写出来后我们会发现一些规律，co函数最终的求导结果都带有负号，且与同一组函数的导数呈现互余。</p><h1 id="连续性与可导性的备忘录"><a href="#连续性与可导性的备忘录" class="headerlink" title="连续性与可导性的备忘录"></a>连续性与可导性的备忘录</h1><p>在第一次接触连续性与可导性时理解完全不深刻，所谓的一些可导必连续，连续不一定可导还是借助同学间流传的自行车的笑话记住的，本次对其进行简单但相对细致的探究，以求理解。</p><h2 id="从导数的角度出发"><a href="#从导数的角度出发" class="headerlink" title="从导数的角度出发"></a>从导数的角度出发</h2><p>在定义某一点的导数的时候我们有</p><script type="math/tex; mode=display">f'(x)=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}</script><p>从几何上讲（我们单纯的把它限制在一次函数内），这就是在曲线上先取一定点A$(x,f(x))$，然后在同一曲线上取除了该定点的另一点B$(x+h,f(x+h))$，用直线将这两点连接起来当h趋于零时，该直线的斜率就是导数，即就是该点切线的斜率。</p><h2 id="再来思考连续"><a href="#再来思考连续" class="headerlink" title="再来思考连续"></a>再来思考连续</h2><p>连续的定义为：$x \in I$（I为函数定义域）当$c-\delta &lt; x &lt; c+\delta$时有任意的正实数$\varepsilon$满足$f(c)-\varepsilon&lt; f(x) &lt; f(x)+\varepsilon$则该函数在c处连续。简单的讲，就是在左右逼近极限后，它所得到的是一个统一的值。现在给出一个例子，观察函数$y=|x|$，你会发现这个函数在定义域上是完全连续的，那么它同样在定义域内可导吗？<br>我们很容易的的发现，在$x=0$处，该函数图像是一个尖点，考虑之前我们对函数导数下的几何方面的定义，你会发现，函数在该点上没有唯一的切线，故其不可导。综上，连续是不一定可导的，我们接下来证明可导一定连续。<br>借由刚才得到的求导的定义式我们有：</p><script type="math/tex; mode=display">f'(x)=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}\times h=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}\times \lim_{h\to 0}h=0</script><p>则</p><script type="math/tex; mode=display">\lim_{h\to 0}f(x+h)-f(x)=0</script><p>即</p><script type="math/tex; mode=display">\lim_{h\to 0}f(x+h)=f(x)</script><p>综合之前连续性定义，有可导一定连续。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1]《普林斯顿微积分读本》 Adrian Banner著 杨爽等译<br>[2]Wikimedia官网<a href="https://commons.wikimedia.org/wiki/Main_Page">https://commons.wikimedia.org/wiki/Main_Page</a><br>[3]tikz模板官网<a href="https://texample.net/media/tikz/examples/PDF/trigonometric-hexagon.pdf">https://texample.net/media/tikz/examples/PDF/trigonometric-hexagon.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> 微积分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微积分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git与Github(1 git与github简介)</title>
      <link href="2021/02/04/Git-and-Github/"/>
      <url>2021/02/04/Git-and-Github/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Git，什么又是Github？"><a href="#什么是Git，什么又是Github？" class="headerlink" title="什么是Git，什么又是Github？"></a>什么是Git，什么又是Github？</h1><h2 id="先说Git"><a href="#先说Git" class="headerlink" title="先说Git"></a>先说Git</h2><p>与众人所熟知的github不一样，git是一个<strong>软件</strong>，就如同你装在计算机里运行的所有其他软件一样，这是一个伟大的发明创造。</p><h3 id="起源、定义"><a href="#起源、定义" class="headerlink" title="起源、定义"></a>起源、定义</h3><p>git的创造者是Linus Benedict Torvalds， 林纳斯先生的另一伟大创造就是Linux系统，而我们的主角Git也与Linux有着很深的联系，Git是为Linux专门打造的版本控制器。<br>综上我们现在有两个问题，什么是版本控制器？为什么Linux需要这个玩意？ </p><h4 id="先来解决第一个文题：什么是版本控制器？"><a href="#先来解决第一个文题：什么是版本控制器？" class="headerlink" title="先来解决第一个文题：什么是版本控制器？"></a>先来解决第一个文题：什么是版本控制器？</h4><p>版本控制器统称VCS(version control system)顾名思义，它就是用来控制版本的。如果你有玩过单机版RPG游戏，那么你一定会懂，在每次面对强大的boss时，你首先需要做的就是存档，当boss战对自己不利，或是消耗太多时，为了避免死亡，你可以选择读档，从之前你的存档处开始，既避免了死亡的惩罚，又不用像之前一样解决小怪。<br>版本控制器就是文件版的存档，当你在自己的计算机上完成某一个项目时，你可以借助VCS来实现版本的储存迭代，它会记录下每一次的版本内容，提交时间，你可以选择从现在跳回(Git中称为回滚)之前你储存的<strong>任何</strong>一个版本。<br>要做到以上，通常我们会这么做<img src="/2021/02/04/Git-and-Github/example.png" class title="example"><br>这样会导致文件乱七八糟，如果起名不规则，还会导致文件错乱。但如果运用Git，文件夹中只会有一个文件，但却保存所有的文件版本。以上过程都在你自己的本地计算机中进行，叫做local VCS，Git当然能做到，但它做到的不仅于此。<br><img src="/2021/02/04/Git-and-Github/Lvcs.png" class title="Local vcs示意图，引自[3]">  </p><h4 id="我们先解决第二个问题：为什么Linux需要Git？"><a href="#我们先解决第二个问题：为什么Linux需要Git？" class="headerlink" title="我们先解决第二个问题：为什么Linux需要Git？"></a>我们先解决第二个问题：为什么Linux需要Git？</h4><p>我在此对Linux不多作介绍，读者若对此没有概念，那请 <strong><em>一定</em></strong> 学习有关于它的相关资料，Linux是开源的操作系统，既然是开源的就会有杰出的程序员、黑客为它做出贡献，但是这就涉及到一个问题，我们该如何将这些代码片段合成来实现Linux的更新呢？原来的方法，是由林纳斯手动填补，但这样效率低下，重复劳动大，自2002年起，Linux开始使用Bitkeeper(一个商用软件)作为版本控制器，来实现版本更新，这是怎么实现的？我们借此机会介绍版本控制器的另外两种模式：Centralized VCS 和 Distributed VCS。<br>Centralize VCS由一个数据中心和多个开发者构成，所有的数据、文件等都存储且仅存储在数据中心中，开发者负责对数据中心中的文件进行创建debug等。这样的好处是管理数据中心者具有绝对的权限，他可以指定每一个开发者的权限，设定他能看到多少内容。但这样做却冒着巨大的风险，一旦数据中心遭到攻击或是出现系统故障，所有人的工作都有在一瞬间化泡影的风险。<img src="/2021/02/04/Git-and-Github/Cvcs.png" class title="Centralized vcs示意图，引自[3]">Distributed VCS填补了这样的问题。<br>它将原本的Local VCS与Centralized VCS相结合，它在每个人的计算机包括中心数据库上都建立了数据库，存放了自初始到最终版本中每一个文件版本，每个人都可以将自己的工作发布上传到中心数据库，看到文件更新的人都可以从数据中心下载保存在自己的计算机之中，在此基础上再做贡献。<br><img src="/2021/02/04/Git-and-Github/Dvcs.png" class title="Distributed vcs示意图，引自[3]">Git就是帮助我们实现这一切的软件，而我们使用Git上传到的数据中心，就是大名鼎鼎的Github。<br>回到那段历史，Bitkeeper一直为Linux提供服务，直到2005年，该公司与Linux社区一众黑客决裂，相传原因是有人尝试对Bitkeeper进行破解(就是把人家的正版软件盗版化。顺带一提，Bitkeeper一直无偿为Linux社区提供服务。)没办法，社区们的诸位以林纳斯先生为首，于2005年推出了Git，来帮助Linux进行版本更新，代码补充。今天，Git不再单单是Linux的专属软件，它为windows、Linux、Mac等系统提供 <strong><em>无偿的、开源的服务</em></strong>，Git一经推出迅速占领了VCS的市场，随着Github的面世，Git的用户数量再次获得了爆炸性的增长。2016年，原本作为商业软件的Bitkeeper，宣布对外开源。  </p><h1 id="再来看看Github"><a href="#再来看看Github" class="headerlink" title="再来看看Github"></a>再来看看Github</h1><p>就像我们之前提到过的，GitHub相对于Git而言是其数据中心，当然，基于git而开发的数据中心不止GitHub一个，比较知名的还有gitlab等。但是在所有为git提供服务的数据中心之中，github无疑是最大最成功的一个。截至2020年一月，GitHub已经拥有超过四千万的用户以及超过一亿九千万个代码仓库[4]，这个数字还在不断的累加增长，GitHub毫无疑问是世界上最大的代码社区。继承了开源运动的优秀思想，GitHub的大多数服务都是<strong><em>免费</em></strong>的，读者现在看到的这个网站也是基于GitHub的服务器搭建起来的。笔者在此解决一些有关于GitHub最经常被问到的问题。  </p><h2 id="我们能用GitHub做什么？"><a href="#我们能用GitHub做什么？" class="headerlink" title="我们能用GitHub做什么？"></a>我们能用GitHub做什么？</h2><p>尽管已经讲了那么多，作为一个开发者/学生/教师/科研人员，我们到底能用它做些什么？<br>就像我们刚才讲的一样，GitHub最原始的目的就是作为git的网络仓库，储存、分发下载、上传的基地，我们可以将原本存储在自己电脑上的版本信息上传至GitHub防止丢失，同时也可以供全世界的人一同下载一起开发。基于此，笔者再此给出GitHub一些常用用法。</p><h3 id="持续性的在不同的电脑终端上进行自己的工作"><a href="#持续性的在不同的电脑终端上进行自己的工作" class="headerlink" title="持续性的在不同的电脑终端上进行自己的工作"></a>持续性的在不同的电脑终端上进行自己的工作</h3><p>假设我们在写一个项目，项目并未完成，因为外界原因我们需要转移阵地，为了能在其他地方继续我们的工作，我们应该怎么做？通常做法是使用U盘将自己需要继续的工作拷贝下来，换台电脑继续。GitHub则提供了另一种方案，我们可以将半完成品上传到GitHub中，到了另一个地方，打开终端从GitHub中将自己的工作下载然后继续coding。  </p><h3 id="创建小组工作"><a href="#创建小组工作" class="headerlink" title="创建小组工作"></a>创建小组工作</h3><p>在开始这一段之前我们必须弄明白GitHub中的角色分配问题，GitHub中有organization（组织）、team（团队）以及个体三种单位，要想团队协作开发一个项目，我们首先需要创建一个组织，一个组织之中可以有多个项目，多个团队，而具体到一个团队之中就会有不同的分工存在。<br>一个团队之中有三类成员：admin（管理员）、write（编写者）、read（游客）<br>这三者各自所拥有的权限不一样，其中admin（管理员）拥有最多的权限包括：给项目添加成员、从代码仓库中复制代码到本地、将本地代码上传到仓库、在线阅读代码，而编写者只拥有后三项，其不能给项目添加成员，游客只能阅读和下载，而不能进行提交合并代码。<br>读到这里你可能已经发现了，好像不论是谁都可以下载阅读你写的代码，而你也可以阅读下载别人的代码。是的，GitHub提供免费服务的前提条件之一就是你所做的项目，你所写的代码要符合开源协定，就是你的代码可以被任意阅读下载，而如果你需要一个私密项目，抱歉，GitHub是要<strong><em>收费</em></strong>的。同时GitHub在组织某些方面的服务（例如大规模的组织云存储空间）也是有付费要求的，详情如下<br><img src="/2021/02/04/Git-and-Github/organization.png" class></p><h3 id="为开源事业添砖加瓦"><a href="#为开源事业添砖加瓦" class="headerlink" title="为开源事业添砖加瓦"></a>为开源事业添砖加瓦</h3><p>在GitHub上有众多全球范围内的开源合作项目，你可以选择加入，为其添砖加瓦，你所需要做的如下：<br><img src="/2021/02/04/Git-and-Github/fork.png" class><br>观察到每个开源项目的右上角都会有一个fork选项，选中后该仓库中的所有代码会自动移存到你的仓库中，你可以通过对你自己仓库中的版本进行修改添加（注意是对你自己的库中的版本，你是没有权限直接修改人家的东西的）修改完毕后，你可以选择向项目的原作者申请代码合并（pull request）简称PR，原作可以通过自己的github账号审阅你的代码，考虑是否将你的贡献添加入原来的代码中，一旦通过，你就是该项目的贡献者了。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>[1]bitkeeper官网： <a href="https://www.bitkeeper.org/">https://www.bitkeeper.org/</a><br>[2]Git官网：<a href="https://git-scm.com/">https://git-scm.com/</a><br>[3]<strong>Progit</strong> written by Scott Chacon and Ben Straub(该书可以免费在Git官网上下载，文中思维导图均引自此书)<br>[4]<a href="https://en.wikipedia.org/wiki/GitHub">https://en.wikipedia.org/wiki/GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
